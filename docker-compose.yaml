version: "3"

services:
  db:
    image: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: postgres
    ports:
      - 5432:5432
    restart: always

  store:
    build:
      context: ./
      dockerfile: ./Dockerfile
      args:
        CRATE: "store"
    links:
      - auth
      - db
    ports:
      - 8088:8088
    restart: always
    environment:
      DATABASE_URL: postgres://postgres:password@db/postgres
      BIND_ADDR: "0.0.0.0:8088"
      AUTH_URL: http://auth:8091

    command: bash -c "tools/wait.sh db:5432 -- ./store/store"
    depends_on:
      - db
      - auth
  
  auth:
    build:
      context: ./
      dockerfile: ./Dockerfile
      args:
        CRATE: "auth"
    environment:
      DATABASE_URL: postgres://postgres:password@db/postgres
      RABBITMQ_URL: amqp://rabbit:5672
      JWT_SECRET: secret
    command: bash -c "tools/wait.sh db:5432 -- tools/wait.sh rabbit:5672 -- tools/wait.sh rabbit:5672 -- ./auth/auth"
    restart: always
    ports:
      - 8089:8089
      - "8091:8091"
    links:
      - rabbit
    depends_on:
      - db
      - rabbit
  
  emailmock:
    image: reachfive/fake-smtp-server
    ports: 
      - "25:1025"
      - 1080:1080
  
  notifications:
    build:
      context: .
      dockerfile: ./Dockerfile
      args:
        CRATE: "notifications"
    environment:
      RABBITMQ_URL: amqp://rabbit:5672
      FROM_ADDRESS: arodionov18@gmail.com
      IS_MOCKED: "true"
      SMTP_SERVER: emailmock:1025
    command: bash -c "tools/wait.sh rabbit:5672 -- ./notifications/notifications"
    restart: always
    ports:
      - 8090:8090
    links:
      - emailmock
      - rabbit
    depends_on:
      - rabbit
  
  rabbit:
    image: rabbitmq:3
    ports:
      - 5672:5672
    #  - 15672:15672
    restart: unless-stopped
    healthcheck:
        test: ["CMD", "curl", "-f", "http://localhost:5672"]
        interval: 30s
        timeout: 10s
        retries: 5